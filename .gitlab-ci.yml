variables:
  UPSTREAM_REPO: monado/monado

  DEBIAN_TAG: 2020-03-03.1
  DEBIAN_VERSION: buster
  DEBIAN_CONTAINER_IMAGE: "$CI_REGISTRY_IMAGE/debian/$DEBIAN_VERSION:$DEBIAN_TAG"
  NDK_TAG: 2020-03-03.2
  NDK_CONTAINER_IMAGE: "$CI_REGISTRY_IMAGE/debian/ndk:$NDK_TAG"

  ARCH_TAG: 2019-12-03.0
  ARCH_CONTAINER_IMAGE: "$CI_REGISTRY_IMAGE/archlinux/rolling:$ARCH_TAG"

include:
  - project: "wayland/ci-templates"
    ref: master
    file: "/templates/debian.yml"
  - project: "wayland/ci-templates"
    ref: master
    file: "/templates/arch.yml"

stages:
  - container_prep
  - build
  - pages
  - deploy

###
# Container prep jobs

# Base for debian containers
.debian:container_base:
  extends: .debian@container-ifnot-exists
  stage: container_prep
  variables:
    GIT_STRATEGY: none # no need to pull the whole tree for rebuilding the image
    DEBIAN_EXEC: "bash .gitlab-ci/${CI_JOB_NAME}.sh"

# Debian Buster (x64 + i386)
debian:container_prep:
  extends: .debian:container_base
  variables:
    # a list of packages to install
    DEBIAN_DEBS: "build-essential git wget unzip cmake meson ninja-build doxygen graphviz libeigen3-dev curl patch python3 pkg-config libx11-dev libxxf86vm-dev libxrandr-dev libxcb-randr0-dev libhidapi-dev libwayland-dev libvulkan-dev glslang-dev glslang-tools libglvnd-dev libgl1-mesa-dev ca-certificates libusb-1.0-0-dev libuvc-dev libavcodec-dev libopencv-dev libudev-dev clang-format-7 codespell libv4l-dev libegl1-mesa-dev"

# Debian Buster + the Android NDK in /opt/android-ndk
ndk:container_prep:
  extends: .debian:container_base
  variables:
    REPO_SUFFIX: ndk
    DEBIAN_TAG: $NDK_TAG
    # a list of packages to install
    DEBIAN_DEBS: "git wget unzip cmake meson ninja-build libeigen3-dev python3 pkg-config ca-certificates"

# Arch Linux (x64)
arch:container_prep:
  extends: .arch@container-ifnot-exists
  stage: container_prep
  variables:
    GIT_STRATEGY: none # no need to pull the whole tree for rebuilding the image
    # a list of packages to install
    ARCH_PKGS: "git gcc cmake meson ninja pkgconfig python3 diffutils patch doxygen graphviz eigen hidapi libxrandr mesa glslang vulkan-headers vulkan-icd-loader check glfw-x11 libusb opencv gtk3 ffmpeg v4l-utils qt5-base"
    ARCH_EXEC: "bash .gitlab-ci/${CI_JOB_NAME}.sh"

format-and-spellcheck:
  stage: build
  image: $DEBIAN_CONTAINER_IMAGE
  script:
    - scripts/format-and-spellcheck.sh
  artifacts:
    paths:
      - patches/
    expire_in: 1 week
    when: on_failure

# "Base" job for a CMake build
.build-cmake:
  stage: build
  script:
    - mkdir build
    - pushd build
    - cmake -GNinja .. $CMAKE_ARGS
    - ninja

debian:cmake:
  image: $DEBIAN_CONTAINER_IMAGE
  extends: .build-cmake

arch:cmake:
  image: $ARCH_CONTAINER_IMAGE
  extends: .build-cmake

# "Base" job for a Meson build
.build-meson:
  stage: build
  script:
    - mkdir build
    - pushd build
    - meson .. $MESON_ARGS
    - ninja

debian:meson:
  image: $DEBIAN_CONTAINER_IMAGE
  extends: .build-meson
  artifacts:
    paths:
      - build/doc/html/

arch:meson:
  extends: .build-meson
  image: $ARCH_CONTAINER_IMAGE
  variables:
    MESON_ARGS: -Ddocs=disabled

# Cross-compiling
debian:meson:32bit:
  image: $DEBIAN_CONTAINER_IMAGE
  extends: .build-meson
  variables:
    MESON_ARGS: --prefix /usr --libdir /usr/lib/i386-linux-gnu --cross-file /cross_file-i386.txt

debian:cmake:32bit:
  image: $DEBIAN_CONTAINER_IMAGE
  extends: .build-cmake
  variables:
    # OpenCV and local OpenHMD doesn't play nicely with us in multi-arch.
    CMAKE_ARGS: -DCMAKE_TOOLCHAIN_FILE=/toolchain-i386.cmake -DBUILD_WITH_OPENCV=off -DBUILD_WITH_OPENHMD=off

# Base of Android NDK builds.
# Takes the last :-delimited part of the name as the ABI to build for.
.ndk:build-base:
  stage: build
  image: $NDK_CONTAINER_IMAGE
  variables:
    ANDROID_PLATFORM: 24
  script:
    - mkdir build
    - pushd build
    # This extracts the ABI from the job name
    - export ABI=$(echo $CI_JOB_NAME | cut --delimiter=":" -f 2)
    # Note we are pointing CMake to the host install of Eigen3 because it's header-only
    # and thus this is safe to do.
    - cmake -GNinja .. -DANDROID_PLATFORM=$ANDROID_PLATFORM -DANDROID_ABI=$ABI -DCMAKE_TOOLCHAIN_FILE=/opt/android-ndk/build/cmake/android.toolchain.cmake -DEigen3_DIR=/usr/lib/cmake/eigen3/
    - ninja

ndk:armeabi-v7a:
  extends: .ndk:build-base

ndk:arm64-v8a:
  extends: .ndk:build-base

###
# Pages
###
pages:
  stage: pages
  only:
    - master
  dependencies:
    - debian:meson
  script:
    - mkdir -p public
    - mv build/doc/html/* public/
  artifacts:
    paths:
      - public
